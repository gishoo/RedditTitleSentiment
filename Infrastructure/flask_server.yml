---
- name: Deploy RedditTitleSentiment Flask app and API
  hosts: webservers
  become: yes
  vars:
    repo_url: "https://github.com/gishoo/RedditTitleSentiment.git"
    repo_dest: /opt/RedditTitleSentiment
    app_user: flaskuser
    venv_path: /opt/RedditTitleSentiment/venv
    flask_server_path: "{{ repo_dest }}/flask_server"
    gunicorn_socket: /run/gunicorn.sock
    frontend_service: flask_server_gunicorn
    api_service: flask_api_gunicorn

  tasks:
    - name: Ensure required packages are installed
      apt:
        name:
          - python3
          - python3-pip
          - python3-venv
          - nginx
          - git
        update_cache: yes

    - name: Ensure application user exists
      user:
        name: "{{ app_user }}"
        system: yes
        create_home: yes

    - name: Clone the RedditTitleSentiment repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        update: yes
        version: main

    - name: Create virtual environment
      command: python3 -m venv "{{ venv_path }}"
      args:
        creates: "{{ venv_path }}/bin/activate"

    - name: Install Python dependencies
      pip:
        name:
          - flask
          - gunicorn
          - transformers
          - torch
          - mlflow
          - beautifulsoup4
          - requests
          - flask_sqlalchemy
        virtualenv: "{{ venv_path }}"

    - name: Set Reddit API environment variables
      copy:
        dest: /etc/environment
        content: |
          REDDIT_CLIENT_ID="{{ lookup('env', 'REDDIT_CLIENT_ID') }}"
          REDDIT_CLIENT_SECRET="{{ lookup('env', 'REDDIT_CLIENT_SECRET') }}"
          REDDIT_USER_AGENT="{{ lookup('env', 'REDDIT_USER_AGENT') }}"
      notify: Reload Environment

    - name: Create systemd service for frontend (app.py)
      copy:
        dest: /etc/systemd/system/{{ frontend_service }}.service
        content: |
          [Unit]
          Description=Flask App Frontend (app.py) via Gunicorn
          After=network.target

          [Service]
          User={{ app_user }}
          Group=www-data
          WorkingDirectory={{ flask_server_path }}
          Environment="PATH={{ venv_path }}/bin"
          EnvironmentFile=/etc/environment
          ExecStart={{ venv_path }}/bin/gunicorn -w 3 -b unix:{{ gunicorn_socket }} app:app

          [Install]
          WantedBy=multi-user.target

    - name: Create systemd service for API (api.py)
      copy:
        dest: /etc/systemd/system/{{ api_service }}.service
        content: |
          [Unit]
          Description=Flask API (api.py) via Gunicorn on localhost:5001
          After=network.target

          [Service]
          User={{ app_user }}
          Group=www-data
          WorkingDirectory={{ flask_server_path }}
          Environment="PATH={{ venv_path }}/bin"
          EnvironmentFile=/etc/environment
          ExecStart={{ venv_path }}/bin/gunicorn -w 2 -b 127.0.0.1:5001 api:app

          [Install]
          WantedBy=multi-user.target

    - name: Reload systemd and start services
      systemd:
        name: "{{ item }}"
        daemon_reload: yes
        enabled: yes
        state: restarted
      loop:
        - "{{ frontend_service }}"
        - "{{ api_service }}"

    - name: Configure nginx for frontend
      copy:
        dest: /etc/nginx/sites-available/flask_server
        content: |
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://unix:{{ gunicorn_socket }};
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location /static/ {
                  alias {{ flask_server_path }}/static/;
              }
          }

    - name: Enable nginx site
      file:
        src: /etc/nginx/sites-available/flask_server
        dest: /etc/nginx/sites-enabled/flask_server
        state: link
        force: yes

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart nginx
      service:
        name: nginx
        state: restarted
    
    - name: Ensure UFW is installed
      apt:
        name: ufw
        state: present
        update_cache: yes

    - name: Allow SSH
      ufw:
        rule: allow
        name: 'SSH'

    - name: Allow OpenSSH (redundant but safe)
      ufw:
        rule: allow
        name: 'OpenSSH'

    - name: Allow Nginx Full
      ufw:
        rule: allow
        name: 'Nginx Full'

    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
        logging: on

